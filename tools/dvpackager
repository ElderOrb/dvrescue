#!/bin/bash

# dependencies: dvrescue, xmlstarlet

_usage(){
  cat <<EOF
dvpackager

Rewrap a DV stream. This script is part of the dvrescue project.

Usage:
dvpackager [options] file.dv [file2.dv file3.dv file4.dv]

Options:

 By default, dvpackager will split the output files so that each time
 significant technical characteristics of the dv stream change (such as aspect
 ratio, frame rate, audio channel count, or audio sample rate) a new output file
 will be written. The following flags adjust the way dvpackager will split the
 output.

 -f       (forces dvpackager to ignore changes in significant technical
           characteristics of the dv stream when splitting the output)
 -s       (split the output file at recording start markers)
 -d       (split the output file at non-consecutive recording timestamps)
 -t       (split the output file at non-consecutive timecode values)

 -v       (shows ffmpeg stderr output, otherwise this is hidden)

 For example, the following command:

 dvpackager -t INPUT.dv

 will read INPUT.dv and rewrap those dv frames into an output file while making
 one new output file whenever there is a change in significant technical
 characteristics or a non-consecutive timecode value within INPUT.dv.

 dvpacakager also has an 'unpackage' mode

 -u       (export the dv stream from each provided file into a single dv stream)

 For example, the following command:

 dvapackager -u INPUT_1.mov INPUT_2.mov INPUT_3.mov

 will create one dv stream that contains all the DV of each input file.

EOF
}
if [ "${#}" = 0 ] ; then
  _usage
  exit 0
fi

_maketemp(){
    mktemp -q "/tmp/$(basename "${0}").XXXXXX"
    if [ "${?}" -ne 0 ]; then
        echo "${0}: Can't create temp file, exiting..."
        _writeerrorlog "_maketemp" "was unable to create the temp file, so the script had to exit."
        exit 1
    fi
}

_get_ranges(){
  xmlstarlet sel -N "d=https://mediaarea.net/dvrescue" -t -m "${MATCH_FRAMES}" -v "@pts" -o "|" -v "@tc" -o "|" -v "@rdt" -o "|" -v "parent::d:frames/@end_pts" -n "${DVRESCUE_XML}" |\
     awk  -F "|" 'BEGIN{OFS="|";}{if(pts){print pts,$1,tc,rdt};pts=$1;tc=$2;rdt=$3;end_pts=$4}END{print pts,end_pts,tc,rdt}'
}

MATCH_FRAMES="d:dvrescue/d:media/d:frames/d:frame[1]|"
FFMPEG_VERBOSE=(-v 0)

# command-line options to set media id and original variables
OPTIND=1
while getopts ":fsdtvuh" opt ; do
  case "${opt}" in
    f) MATCH_FRAMES="" ;;
    s) MATCH_FRAMES+="d:dvrescue/d:media/d:frames/d:frame[@rec_start='1']|" ;;
    d) MATCH_FRAMES+="d:dvrescue/d:media/d:frames/d:frame[@rdt_nc='1']|" ;;
    t) MATCH_FRAMES+="d:dvrescue/d:media/d:frames/d:frame[@tc_nc='1']|" ;;
    v) unset FFMPEG_VERBOSE ;;
    u) UNPACKAGER="Y" ;;
    h) _usage ; exit 0 ;;
    :) echo "Option -${OPTARG} requires an argument" ; _usage ; exit 1 ;;
    *) echo "bad option -${OPTARG}" ; _usage ; exit 1 ;;
  esac
done
shift "$((OPTIND-1))"
MATCH_FRAMES="${MATCH_FRAMES%?}"

if [[ "${UNPACKAGER}" == "Y" ]] ; then
    OUTPUTNAME="unpackaged_$(uuidgen).dv"
    echo "Unpackaging mode. Unpackaging the input files into ${OUTPUTNAME}."
    for i in "${@}" ; do
        ffmpeg -nostdin "${FFMPEG_VERBOSE[@]}" -i "$i" -map 0:v:0 -c copy -f rawvideo - >> "${OUTPUTNAME}"
    done
    exit
fi

# later give some options
FORMAT="mov"
EXTENSION="mov"

DVFILE="${1}"
BASENAME="$(basename "${DVFILE}")"
SIDECAR_DIR="${DVFILE}_dvrescue"
DVRESCUE_XML_TEMP="$(_maketemp)"
DVRESCUE_XML="${SIDECAR_DIR}/${BASENAME}.dvrescue.xml"

# check if the dvrescue xml is already made
if [[ ! -f "${DVRESCUE_XML}" ]] ; then
  echo "Making a dvrescue xml file for ${BASENAME}..."
  dvrescue "${DVFILE}" > "${DVRESCUE_XML_TEMP}"
  xmlstarlet sel -N "d=https://mediaarea.net/dvrescue" -t -m "/d:dvrescue/d:media" -v "@ref" -n "${DVRESCUE_XML_TEMP}"
  if [[ -z "$(xmlstarlet sel -N "d=https://mediaarea.net/dvrescue" -t -m "/d:dvrescue/d:media" -v "@ref" -n "${DVRESCUE_XML_TEMP}")" ]] ; then
    echo "This first video codec of ${BASENAME} is not DV."
    exit 1
  else
    # check if the sidecar directory is there
    if [[ ! -d "${SIDECAR_DIR}" ]] ; then
      mkdir -p "${SIDECAR_DIR}"
    fi
    mv -v "${DVRESCUE_XML_TEMP}" "${DVRESCUE_XML}"
  fi
fi

_get_ranges "${DVRESCUE_XML}"

OPT_INPUT+=(-y)
OPT_INPUT+=(-nostdin)
OPT_INPUT+=(-hide_banner)
OPT_OUTPUT+=(-map 0)
OPT_OUTPUT+=(-c:v copy)
OPT_OUTPUT+=(-c:a copy)
OPT_OUTPUT+=(-f "$FORMAT")

#DVRESCUE_VERSION="$(xmlstarlet sel -N "d=https://mediaarea.net/dvrescue" -t -v "d:dvrescue/d:creator/d:program" -o "-" -v "d:dvrescue/d:creator/d:version" -n "${DVRESCUE_XML}")"
#MUXER="${LAVF_VERSION} + ${DVRESCUE_VERSION}"

_get_ranges "${DVRESCUE_XML}" | while IFS="|" read PTS_START PTS_END TC RECDATE; do
  unset START_TIME END_TIME METADATA
  PTS_START_FILENAME_SAFE="${PTS_START//:/-}"
  TC_FILENAME_SAFE="$(echo "${TC}" | sed 's|:|-|g')"

  START_TIME+=(-ss "${PTS_START}")
  METADATA+=(-metadata "timecode=${TC}")
  #OPT_OUTPUT+=(-metadata "encoder=${MUXER}")
  OUTPUT_FILE="${SIDECAR_DIR}/${BASENAME}_${TC_FILENAME_SAFE}_$(uuidgen).${EXTENSION}"

  if [[ -n "${PTS_END}" ]] ; then
    END_TIME+=(-to "${PTS_END}")
  fi
  ffmpeg "${FFMPEG_VERBOSE[@]}" "${OPT_INPUT[@]}" "${START_TIME[@]}" -i "${DVFILE}" -copyts "${END_TIME[@]}" -map 0:v -c:v copy -f rawvideo - | ffmpeg "${FFMPEG_VERBOSE[@]}" "${OPT_INPUT[@]}" -i - "${OPT_INPUT[@]}" "${OPT_OUTPUT[@]}" "${METADATA[@]}" "${OUTPUT_FILE}"
done
