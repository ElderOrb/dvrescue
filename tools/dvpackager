#!/bin/bash

# dependencies: ffprobe, dvrescue, xmlstarlet

_check_if_dv(){
  FIRST_VIDEO_CODEC="$( ffprobe -v 0 -i "${1}" -show_entries stream=codec_name -of compact=p=0:nk=1 -select_streams v:0)"
  if [[ "${FIRST_VIDEO_CODEC}" != "dvvideo" ]] ; then
    echo "This first video codec of ${BASENAME} is not DV, but is ${FIRST_VIDEO_CODEC}."
    exit 1
  fi
}

_get_ranges(){
  xmlstarlet select -N "d=https://mediaarea.net/dvrescue" -t -m "d:dvrescue/d:media/d:frames" -v "d:frame[1]/@pts" -o "-" -v "d:frame[last()]/@pts" -o "-" -v "d:frame[1]/@tc" -n "${DVRESCUE_XML}"
}

_convert_hhmmssmmm2s(){
  TS="${1}"
  H="$(echo "${TS}" | cut -d ":" -f1)"
  M="$(echo "${TS}" | cut -d ":" -f2)"
  S="$(echo "${TS}" | cut -d ":" -f3)"
  awk "BEGIN {print $H * 60 * 60 + $M * 60 + $S}"
}

_duration_from_pts_range(){
  START="${1}"
  END="${2}"
  START_SEC="$(_convert_hhmmssmmm2s "${START}")"
  END_SEC="$(_convert_hhmmssmmm2s "${END}")"
  awk "BEGIN {print $END_SEC - $START_SEC}"
}

# later give some options
FORMAT="mov"
EXTENSION="mov"

DVFILE="${1}"
BASENAME="$(basename "${DVFILE}")"
SIDECAR_DIR="${DVFILE}_dvrescue"
DVRESCUE_XML="${SIDECAR_DIR}/${BASENAME}.dvrescue.xml"
_check_if_dv "${DVFILE}"

# check if the sidecar directory is there
if [[ ! -d "${SIDECAR_DIR}" ]] ; then
  mkdir -p "${SIDECAR_DIR}"
fi

# check if the dvrescue xml is already made
if [[ ! -f "${DVRESCUE_XML}" ]] ; then
  echo "Making a dvrescue xml file for ${BASENAME}..."
  dvrescue "${DVFILE}" > "${DVRESCUE_XML}"
fi

_get_ranges "${DVRESCUE_XML}"

OPT_INPUT+=(-y)
OPT_INPUT+=(-nostdin)
OPT_OUTPUT+=(-map 0)
OPT_OUTPUT+=(-c:v copy)
OPT_OUTPUT+=(-c:a copy)
OPT_OUTPUT+=(-f "$FORMAT")

#LAVF_VERSION="$(ffprobe -v 0 -show_entries library_version=ident | grep "Lavf" | grep -v "Lavfi" | cut -d "=" -f2)"
#DVRESCUE_VERSION="$(xmlstarlet sel -N "d=https://mediaarea.net/dvrescue" -t -v "d:dvrescue/d:creator/d:program" -o "-" -v "d:dvrescue/d:creator/d:version" -n "${DVRESCUE_XML}")"
#MUXER="${LAVF_VERSION} + ${DVRESCUE_VERSION}"

_get_ranges "${DVRESCUE_XML}" | while read range ; do
  unset START_TIME END_TIME
  PTS_START="$(echo "${range}" | cut -d"-" -f1)"
  PTS_START_FILENAME_SAFE="$(echo "${PTS_START}" | sed 's|:|-|g')"
  PTS_END="$(echo "${range}" | cut -d"-" -f2)"
  TC="$(echo "${range}" | cut -d"-" -f3)"
  TC_FILENAME_SAFE="$(echo "${TC}" | sed 's|:|-|g')"

  START_TIME+=(-ss "${PTS_START}")
  OPT_OUTPUT+=(-metadata "timecode=${TC}")
  #OPT_OUTPUT+=(-metadata "encoder=${MUXER}")
  OUTPUT_FILE="${SIDECAR_DIR}/${BASENAME}_${TC_FILENAME_SAFE}.${EXTENSION}"

  if [[ -n "${PTS_END}" ]] ; then
    DURATION="$(_duration_from_pts_range "${PTS_START}" "${PTS_END}")"
    echo "DURATION IS $DURATION"
    END_TIME+=(-t "${DURATION}")
  fi
  ffmpeg "${OPT_INPUT[@]}" "${START_TIME[@]}" -i "${DVFILE}" -c:v copy -f rawvideo - | ffmpeg "${OPT_INPUT[@]}" -i - "${OPT_OUTPUT[@]}" "${END_TIME[@]}" "${OUTPUT_FILE}"
done
